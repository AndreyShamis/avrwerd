;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/25/2011
;Author  : NeVaDa
;Company : WERD
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 004D {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 004E char status,data;
; 0000 004F status=UCSRA;
;PCODE: $0000000C VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0050 data=UDR;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0051 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0052    {
; 0000 0053    rx_buffer[rx_wr_index]=data;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0054    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0055    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0056       {
; 0000 0057       rx_counter=0;
;PCODE: $00000021 VOL: 0
; 0000 0058       rx_buffer_overflow=1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0059       };
;PCODE: $00000024 VOL: 0
; 0000 005A    };
;PCODE: $00000025 VOL: 0
; 0000 005B }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0062 {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0063     char data;
; 0000 0064     while (rx_counter==0);
;PCODE: $0000002C VOL: 0
;	data -> R17
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0065     data=rx_buffer[rx_rd_index];
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0066     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0067     #asm("cli")
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
	cli
;PCODE: $0000003C VOL: 0
; 0000 0068     --rx_counter;
;PCODE: $0000003D VOL: 0
; 0000 0069     #asm("sei")
;PCODE: $0000003E VOL: 0
	sei
;PCODE: $0000003F VOL: 0
; 0000 006A     return data;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006B }
;PCODE: $00000043 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 007B {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007C     if (tx_counter)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 007D        {
; 0000 007E        --tx_counter;
;PCODE: $00000048 VOL: 0
; 0000 007F        UDR=tx_buffer[tx_rd_index];
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0080        if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0081        };
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0082 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0089 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008A     while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008B     #asm("cli")
;PCODE: $0000005F VOL: 0
	cli
;PCODE: $00000060 VOL: 0
; 0000 008C     if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008D        {
; 0000 008E        tx_buffer[tx_wr_index]=c;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 008F        if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0090        ++tx_counter;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0091        }
; 0000 0092     else
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0093        UDR=c;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0094     #asm("sei")
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
	sei
;PCODE: $00000079 VOL: 0
; 0000 0095 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;#pragma used-
;#endif
;
;
;// PIND0..3 will be row inputs
;#define KEYIN PINB
;// PORTD4..7 will be column outputs
;#define KEYOUT PORTB
;#define F_XTAL 4000000L
;
;// used for TIMER0 count initialization
;#define INIT_TIMER TCNT0=0x100L-F_XTAL/64L/500L
;//#define INIT_TIMER TCNT0=0x10L
;#define FIRST_COLUMN 0x80
;#define LAST_COLUMN 0x20
;
;
;void init_keypad(void);
;char inkey();
;
; char keys;
;
; void GetButton(char val)
; 0000 00AD {
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00AE 
; 0000 00AF 
; 0000 00B0     if(!PINB.0)
;	val -> Y+0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B1         keys =  1+val;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00B2     else if(!PINB.1)
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00B3         keys =  2+val;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B4     else  if(!PINB.2)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B5         keys =  3+val;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00B6     else  if(!PINB.3)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00B7         keys =  4+val;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B8     else  if(!PINB.4)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B9         keys =  5+val;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BA     else
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00BB      keys =  0;
;PCODE: $000000A7 VOL: 0
; 0000 00BC }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;// TIMER 0 interrupt at every 2 ms
;interrupt [TIM0_OVF] void timer0_int(void){
; 0000 00BE interrupt [7] void timer0_int(void){
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00BF 
; 0000 00C0 
; 0000 00C1  /*
; 0000 00C2 
; 0000 00C3     static unsigned char key_pressed_counter = 20;
; 0000 00C4     static unsigned char key_released_counter,
; 0000 00C5                     column=FIRST_COLUMN;
; 0000 00C6     static unsigned row_data,
; 0000 00C7                     crt_key;
; 0000 00C8     // reinitialize TIMER0
; 0000 00C9     INIT_TIMER;
; 0000 00CA     row_data<<=3;
; 0000 00CB     // get a group of 4 keys in in row_data
; 0000 00CC     row_data|=~KEYIN&0xf1;
; 0000 00CD     column>>=1;
; 0000 00CE     if (column==(LAST_COLUMN>>1))
; 0000 00CF     {
; 0000 00D0         column=FIRST_COLUMN;
; 0000 00D1         if (row_data==0)
; 0000 00D2                 goto new_key;
; 0000 00D3         if (key_released_counter)
; 0000 00D4                 --key_released_counter;
; 0000 00D5         else
; 0000 00D6         {
; 0000 00D7           if (--key_pressed_counter==9)
; 0000 00D8                 crt_key=row_data;
; 0000 00D9           else
; 0000 00DA           {
; 0000 00DB              if (row_data!=crt_key)
; 0000 00DC              {
; 0000 00DD                 new_key:
; 0000 00DE                 key_pressed_counter=10;
; 0000 00DF                 key_released_counter=0;
; 0000 00E0                 goto end_key;
; 0000 00E1              };
; 0000 00E2              if(!key_pressed_counter)
; 0000 00E3              {
; 0000 00E4                 keys=row_data;
; 0000 00E5                 key_released_counter=20;
; 0000 00E6              };
; 0000 00E7           };
; 0000 00E8         };
; 0000 00E9        end_key:;
; 0000 00EA        row_data=0;
; 0000 00EB     };
; 0000 00EC     // select next column, inputs will be with pull-up
; 0000 00ED     KEYOUT=~column;
; 0000 00EE     */
; 0000 00EF 
; 0000 00F0 
; 0000 00F1 
; 0000 00F2 //     #asm("cli")
; 0000 00F3 //    keys=0;
; 0000 00F4     if(keys==0)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00F5     {
; 0000 00F6     PORTB.5 = 0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00F7     GetButton(0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F8     PORTB.5 = 1;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00F9     }
; 0000 00FA     if(keys==0)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00FB     {
; 0000 00FC     PORTB.6 = 0;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00FD     GetButton(5);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00FE     PORTB.6 = 1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00FF     }
; 0000 0100 
; 0000 0101     if(keys==0)
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0102     {
; 0000 0103     PORTB.7 = 0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0104     GetButton(10);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0105     PORTB.7 = 1;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0106     }
; 0000 0107 
; 0000 0108         #asm("sei")
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
	sei
;PCODE: $000000D1 VOL: 0
; 0000 0109 
; 0000 010A }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;
;
;
;
;//============================================================================
;//      Main Function
;void main(void)
; 0000 0112 {
;PCODE: $000000D5 VOL: 0
; 0000 0113 
; 0000 0114     char k;
; 0000 0115     // Crystal Oscillator division factor: 1
; 0000 0116     #pragma optsize-
; 0000 0117 //    CLKPR=0x80;
; 0000 0118 //    CLKPR=0x00;
; 0000 0119     #ifdef _OPTIMIZE_SIZE_
; 0000 011A     #pragma optsize+
; 0000 011B     #endif
; 0000 011C 
; 0000 011D 
; 0000 011E     PORTA=0x00;
;	k -> R17
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 011F     DDRA=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0120 
; 0000 0121     PORTD=0xFF;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0122     DDRD=0x02;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0123     DDRB=0xE0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0124     PORTB=0xFF;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0125     keys = 0;
;PCODE: $000000E2 VOL: 0
; 0000 0126    /*
; 0000 0127     TCCR0A=0x00;
; 0000 0128     TCCR0B=0x00;
; 0000 0129     TCNT0=0x00;
; 0000 012A     OCR0A=0x00;
; 0000 012B     OCR0B=0x00;
; 0000 012C 
; 0000 012D     TCCR1A=0x00;
; 0000 012E     TCCR1B=0x00;
; 0000 012F     TCNT1H=0x00;
; 0000 0130     TCNT1L=0x00;
; 0000 0131     ICR1H=0x00;
; 0000 0132     ICR1L=0x00;
; 0000 0133     OCR1AH=0x00;
; 0000 0134     OCR1AL=0x00;
; 0000 0135     OCR1BH=0x00;
; 0000 0136     OCR1BL=0x00;
; 0000 0137 
; 0000 0138     GIMSK=0x00;
; 0000 0139     MCUCR=0x00;
; 0000 013A 
; 0000 013B     TIMSK=0x00;
; 0000 013C 
; 0000 013D     USICR=0x00;
; 0000 013E 
; 0000 013F     ACSR=0x80;
; 0000 0140     */
; 0000 0141         UCSRA=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0142         UCSRB=0xD8;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0143         UCSRC=0x06;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0144         UBRRH=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0145         UBRRL=0x33;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0146 
; 0000 0147 
; 0000 0148 
; 0000 0149  init_keypad();
;PCODE: $000000ED VOL: 0
; 0000 014A     k=inkey();
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 014B     putchar(k);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 014C     while (1)
;PCODE: $000000F2 VOL: 0
; 0000 014D     {
; 0000 014E         // Place your code here
; 0000 014F         #pragma warn-
; 0000 0150         if (k=inkey())
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0151         {
; 0000 0152             putchar(k);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0153         }
; 0000 0154         #pragma warn+
;PCODE: $000000F9 VOL: 0
; 0000 0155 
; 0000 0156         delay_ms(400);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0157 
; 0000 0158     };
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0159 }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;
;
;char inkey()
; 0000 015D {
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 015E     unsigned char k;
; 0000 015F  //   #pragma warn-
; 0000 0160    // if (k=keys) keys=0;
; 0000 0161    // INIT_TIMER;
; 0000 0162      if(keys==0)
;PCODE: $00000104 VOL: 0
;	k -> R17
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0163     {
; 0000 0164     PORTB.5 = 0;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0165     GetButton(0);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0166     PORTB.5 = 1;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0167     }
; 0000 0168     if(keys==0)
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0169     {
; 0000 016A     PORTB.6 = 0;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 016B     GetButton(5);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 016C     PORTB.6 = 1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 016D     }
; 0000 016E 
; 0000 016F     if(keys==0)
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0170     {
; 0000 0171     PORTB.7 = 0;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0172     GetButton(10);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0173     PORTB.7 = 1;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0174     }
; 0000 0175     k=keys;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0176         keys=0;
;PCODE: $00000125 VOL: 0
; 0000 0177     return k;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0178 }
;PCODE: $00000129 VOL: 0
;
;void init_keypad(void)
; 0000 017B {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 017C     DDRB=0xE0;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 017D     PORTB=0xFF;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 017E     keys = 0;
;PCODE: $00000130 VOL: 0
; 0000 017F     // Mode: Normal top=FFh
; 0000 0180     // OC0 output: Disconnected
; 0000 0181     TCCR0=0x03;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0182     INIT_TIMER;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0183 
; 0000 0184     // External Interrupts are off
; 0000 0185     MCUCR=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0186     //EMCUCR=0x00;
; 0000 0187     // Timer 0 overflow interrupt is on
; 0000 0188     TIMSK=0x02;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0189     #asm("sei")
;PCODE: $00000139 VOL: 0
	sei
;PCODE: $0000013A VOL: 0
; 0000 018A }
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
