;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/18/2011
;Author  : NeVaDa
;Company : WERD
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
//   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001F #endasm
;#include <lcd.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 12
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0053 {

	.CSEG
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0054     char status,data;
; 0000 0055     status=UCSRA;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0056     data=UDR;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0057     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0058     {
; 0000 0059         rx_buffer[rx_wr_index]=data;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 005A         if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 005B         if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 005C         {
; 0000 005D             rx_counter=0;
;PCODE: $0000002A VOL: 0
; 0000 005E             rx_buffer_overflow=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005F         };
;PCODE: $0000002E VOL: 0
; 0000 0060     };
;PCODE: $0000002F VOL: 0
; 0000 0061 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0068 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0069     char data;
; 0000 006A     while (rx_counter==0);
;PCODE: $00000036 VOL: 0
;	data -> R17
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 006B     data=rx_buffer[rx_rd_index];
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 006C     if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006D #asm("cli")
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
	cli
;PCODE: $00000047 VOL: 0
; 0000 006E     --rx_counter;
;PCODE: $00000048 VOL: 0
; 0000 006F #asm("sei")
;PCODE: $00000049 VOL: 0
	sei
;PCODE: $0000004A VOL: 0
; 0000 0070     return data;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0071 }
;PCODE: $0000004E VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 16
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0081 {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0082     if (tx_counter)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0083     {
; 0000 0084         --tx_counter;
;PCODE: $00000053 VOL: 0
; 0000 0085         UDR=tx_buffer[tx_rd_index];
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0086         if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0087     };
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0088 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 008F {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0090     while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000065 VOL: 0
;	c -> Y+0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0091     #asm("cli")
;PCODE: $0000006C VOL: 0
	cli
;PCODE: $0000006D VOL: 0
; 0000 0092     if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0093     {
; 0000 0094         tx_buffer[tx_wr_index]=c;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0095         if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0096         ++tx_counter;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0097     }
; 0000 0098     else
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0099         UDR=c;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009A #asm("sei")
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
	sei
;PCODE: $00000087 VOL: 0
; 0000 009B }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void SendData(char *data);
;
;void main(void)
; 0000 00A7 {
;PCODE: $0000008B VOL: 0
; 0000 00A8 //  char led_stat = 0;
; 0000 00A9   char data1[16];
; 0000 00AA   char data2[15];
; 0000 00AB   int counter = 0;
; 0000 00AC PORTA=0x00;
;PCODE: $0000008C VOL: 0
;	data1 -> Y+15
;	data2 -> Y+0
;	counter -> R16,R17
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AD DDRA=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AE PORTB=0xff;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AF DDRB=0xff;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B0 PORTC=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B1 DDRC=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B2 PORTD=0xFF;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B3 DDRD=0x02;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B4 
; 0000 00B5 // Timer/Counter 0 initialization
; 0000 00B6 // Clock source: System Clock
; 0000 00B7 // Clock value: Timer 0 Stopped
; 0000 00B8 // Mode: Normal top=FFh
; 0000 00B9 // OC0 output: Disconnected
; 0000 00BA TCCR0=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00BB TCNT0=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00BC OCR0=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BD 
; 0000 00BE // Timer/Counter 1 initialization
; 0000 00BF // Clock source: System Clock
; 0000 00C0 // Clock value: Timer1 Stopped
; 0000 00C1 // Mode: Normal top=FFFFh
; 0000 00C2 // OC1A output: Discon.
; 0000 00C3 // OC1B output: Discon.
; 0000 00C4 // Noise Canceler: Off
; 0000 00C5 // Input Capture on Falling Edge
; 0000 00C6 // Timer1 Overflow Interrupt: Off
; 0000 00C7 // Input Capture Interrupt: Off
; 0000 00C8 // Compare A Match Interrupt: Off
; 0000 00C9 // Compare B Match Interrupt: Off
; 0000 00CA TCCR1A=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00CB TCCR1B=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00CC TCNT1H=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00CD TCNT1L=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00CE ICR1H=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00CF ICR1L=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00D0 OCR1AH=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00D1 OCR1AL=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D2 OCR1BH=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00D3 OCR1BL=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00D4 
; 0000 00D5 // Timer/Counter 2 initialization
; 0000 00D6 // Clock source: System Clock
; 0000 00D7 // Clock value: Timer2 Stopped
; 0000 00D8 // Mode: Normal top=FFh
; 0000 00D9 // OC2 output: Disconnected
; 0000 00DA ASSR=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00DB TCCR2=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00DC TCNT2=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00DD OCR2=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00DE 
; 0000 00DF // External Interrupt(s) initialization
; 0000 00E0 // INT0: Off
; 0000 00E1 // INT1: Off
; 0000 00E2 // INT2: Off
; 0000 00E3 MCUCR=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00E4 MCUCSR=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E5 
; 0000 00E6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E7 TIMSK=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E8 
; 0000 00E9 // USART initialization
; 0000 00EA // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00EB // USART Receiver: On
; 0000 00EC // USART Transmitter: On
; 0000 00ED // USART Mode: Asynchronous
; 0000 00EE // USART Baud Rate: 14400
; 0000 00EF UCSRA=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F0 UCSRB=0xD8;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F1 UCSRC=0x86;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00F2 UBRRH=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00F3 UBRRL=0x33;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F4 
; 0000 00F5 // Analog Comparator initialization
; 0000 00F6 // Analog Comparator: Off
; 0000 00F7 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F8 ACSR=0x80;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00F9 SFIOR=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FA 
; 0000 00FB     // LCD module initialization
; 0000 00FC     lcd_init(16);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00FD 
; 0000 00FE     lcd_gotoxy(0,0);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00FF     lcd_puts("Start MODULE");
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0100     delay_ms(1300);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0101 
; 0000 0102     #asm("sei") // Global enable interrupts
;PCODE: $000000E0 VOL: 0
	sei
;PCODE: $000000E1 VOL: 0
; 0000 0103 
; 0000 0104     while (1)
;PCODE: $000000E2 VOL: 0
; 0000 0105     {
; 0000 0106         counter++;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0107         if(counter > 30000) counter = 0;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0108         //if(counter%100==0)
; 0000 0109         //    PORTB.3 = 0;//    1= OFF
; 0000 010A        // else
; 0000 010B         //    PORTB.3 = 1;
; 0000 010C 
; 0000 010D         if(counter%80==0)
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 010E         {
; 0000 010F             sprintf(data1,"%s",rx_buffer);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0110             lcd_gotoxy(0,0);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0111             lcd_puts(data1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0112             delay_ms(20);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0113             if(counter%50==0)
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0114             {
; 0000 0115                 //delay_ms(150);
; 0000 0116                 lcd_clear();
;PCODE: $0000010A VOL: 0
; 0000 0117                 lcd_gotoxy(0,1);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0118                 //delay_ms(150*8);
; 0000 0119                 sprintf(data2, "$i=%d",counter);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 011A                 lcd_puts(data2);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 011B             }
; 0000 011C         }
;PCODE: $0000011D VOL: 0
; 0000 011D         if(rx_buffer[1] == 'A')
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 011E         {
; 0000 011F             memset(data2,0,sizeof(data2));
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0120             sprintf(data2, "$i=%d:%d",counter,sizeof(data2));
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0121             SendData(data2);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0122             rx_buffer[1] = 'B';
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0123         }
; 0000 0124     }
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0125 }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0

	.DSEG
_0x14:
	.BYTE 0xD
;
;void SendData(char *data)
; 0000 0128 {

	.CSEG
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0129     while(*data != 0)
;PCODE: $00000146 VOL: 0
;	*data -> Y+0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 012A     {
; 0000 012B         putchar(*(++data));
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 012C         delay_ms(10);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 012D     }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 012E }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
