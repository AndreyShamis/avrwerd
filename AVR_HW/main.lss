
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000011f  00000000  00000000  00000115  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b6  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001aa  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b7  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	28 c0       	rjmp	.+80     	; 0x82 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
#include <avr/delay.h>

int main(void)    
{    
	//11111101
	DDRC = 0xc5;            
  34:	85 ec       	ldi	r24, 0xC5	; 197
  36:	84 bb       	out	0x14, r24	; 20
	
	PORTC &=~_BV(PC0);
  38:	a8 98       	cbi	0x15, 0	; 21
	PORTC |=_BV(PC2);
  3a:	aa 9a       	sbi	0x15, 2	; 21
	PORTC |=_BV(PC6);
  3c:	ae 9a       	sbi	0x15, 6	; 21
	PORTC |=_BV(PC7);
  3e:	af 9a       	sbi	0x15, 7	; 21
  40:	84 ec       	ldi	r24, 0xC4	; 196
  42:	99 e0       	ldi	r25, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  44:	28 ec       	ldi	r18, 0xC8	; 200
  46:	30 e0       	ldi	r19, 0x00	; 0
  48:	f9 01       	movw	r30, r18
  4a:	31 97       	sbiw	r30, 0x01	; 1
  4c:	f1 f7       	brne	.-4      	; 0x4a <__SREG__+0xb>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  4e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  50:	d9 f7       	brne	.-10     	; 0x48 <__SREG__+0x9>

		//PORTC &=~1<<0;//0x00;  
		//_delay_ms(250);   
		//PORTC &=~1<<0;//0x00;  
		//_delay_ms(10);
		if((~PINC) &(1<<1))
  52:	99 99       	sbic	0x13, 1	; 19
  54:	04 c0       	rjmp	.+8      	; 0x5e <__SREG__+0x1f>
		{

			PORTC |=_BV(PC0);//0x00;   
  56:	a8 9a       	sbi	0x15, 0	; 21
			PORTC |=_BV(PC2);//0x00;   
  58:	aa 9a       	sbi	0x15, 2	; 21
			PORTC |=_BV(PC6);
  5a:	ae 9a       	sbi	0x15, 6	; 21
  5c:	fa cf       	rjmp	.-12     	; 0x52 <__SREG__+0x13>
			//PORTC &=1<<2; /// 0xff; 
			//_delay_ms(100); 	

		}
		else if((~PINC)&(1<<3))
  5e:	9b 99       	sbic	0x13, 3	; 19
  60:	03 c0       	rjmp	.+6      	; 0x68 <__SREG__+0x29>
		{
			PORTC &=~_BV(PC0);//0x00;  
  62:	a8 98       	cbi	0x15, 0	; 21
			PORTC &=~_BV(PC2);//0x00;  		
  64:	aa 98       	cbi	0x15, 2	; 21
  66:	f5 cf       	rjmp	.-22     	; 0x52 <__SREG__+0x13>
		}
		else if((~PINC)&(1<<4))
  68:	9c 99       	sbic	0x13, 4	; 19
  6a:	04 c0       	rjmp	.+8      	; 0x74 <__SREG__+0x35>
		{
			PORTC &=~_BV(PC0);
  6c:	a8 98       	cbi	0x15, 0	; 21
			PORTC |=_BV(PC2);		
  6e:	aa 9a       	sbi	0x15, 2	; 21
			PORTC &=~_BV(PC7);	//	On LD Left		
  70:	af 98       	cbi	0x15, 7	; 21
  72:	ef cf       	rjmp	.-34     	; 0x52 <__SREG__+0x13>
		}
		else if((~PINC)&(1<<5))
  74:	9d 99       	sbic	0x13, 5	; 19
  76:	ed cf       	rjmp	.-38     	; 0x52 <__SREG__+0x13>
		{
			PORTC |=_BV(PC0);
  78:	a8 9a       	sbi	0x15, 0	; 21
			PORTC &=~_BV(PC2);	
  7a:	aa 98       	cbi	0x15, 2	; 21
			PORTC &=~_BV(PC6);		
  7c:	ae 98       	cbi	0x15, 6	; 21
			PORTC |=_BV(PC7);		
  7e:	af 9a       	sbi	0x15, 7	; 21
  80:	e8 cf       	rjmp	.-48     	; 0x52 <__SREG__+0x13>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
